<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - JugaadPress</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;600&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: var(--bg-secondary);
        }
        ::-webkit-scrollbar-thumb {
            background: var(--border-color);
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: var(--accent-primary);
        }

        /* Text Selection */
        ::selection {
            background-color: var(--accent-primary);
            color: var(--bg-primary);
        }

        :root {
            --bg-primary: #0d1117;
            --bg-secondary: #161b22;
            --bg-tertiary: #21262d;
            --accent-primary: #3fb950;
            --accent-secondary: #58a6ff;
            --accent-danger: #f85149;
            --text-primary: #e6edf3;
            --text-secondary: #8b949e;
            --text-dim: #6e7681;
            --border-color: #30363d;
        }

        body {
            font-family: 'JetBrains Mono', 'Fira Code', 'SF Mono', Monaco, 'Cascadia Code', monospace;
            background: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header */
        header {
            padding: 1rem 2rem;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            flex-direction: column;
            gap: 0.2rem;
        }

        .logo #appTitle {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--accent-primary);
            text-shadow: 0 0 10px rgba(63, 185, 80, 0.3);
        }

        .logo #appTitle::before {
            content: ">";
            color: var(--accent-secondary);
            margin-right: 0.5rem;
            animation: blink 1.5s infinite;
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-email {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .btn-logout {
            padding: 0.5rem 1rem;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-logout:hover {
            background: var(--accent-danger);
            border-color: var(--accent-danger);
        }

        /* Main Container */
        .container {
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 0;
            flex: 1;
            height: calc(100vh - 65px);
        }

        /* Left Panel - Books */
        .books-panel {
            background: var(--bg-secondary);
            border-right: 1px solid var(--border-color);
            overflow-y: auto;
            padding: 1.5rem;
        }

        .panel-title {
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            color: var(--text-dim);
            margin-bottom: 1rem;
            letter-spacing: 1px;
        }

        .panel-title::before {
            content: ">";
            color: var(--accent-secondary);
            margin-right: 0.5rem;
            animation: blink 1.5s infinite;
        }

        @keyframes blink {
            0%, 49% { opacity: 1; }
            50%, 100% { opacity: 0; }
        }

        .book-list {
            list-style: none;
        }

        .book-item {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 1rem;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }

        .book-item::before {
            content: ">";
            position: absolute;
            left: 0.85rem;
            top: 1rem;
            color: var(--text-dim);
            font-size: 0.85rem;
            opacity: 0;
            transition: all 0.2s;
        }

        .book-item:hover {
            border-color: var(--accent-primary);
            box-shadow: 0 0 20px rgba(63, 185, 80, 0.15);
            transform: translateX(2px);
        }

        .book-item:hover::before {
            opacity: 1;
            left: 0.5rem;
        }

        .book-item.active {
            border-color: var(--accent-primary);
            background: rgba(63, 185, 80, 0.05);
        }

        .book-item.active::before {
            opacity: 1;
            color: var(--accent-primary);
            left: 0.5rem;
        }

        .book-item h3 {
            font-size: 1rem;
            margin-bottom: 0.3rem;
            color: var(--text-primary);
        }

        .book-meta {
            font-size: 0.85rem;
            color: var(--text-secondary);
            margin-bottom: 0.75rem;
        }

        .book-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            padding: 0.4rem 0.8rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.85rem;
            transition: all 0.2s;
        }

        .btn-primary {
            background: var(--accent-primary);
            color: var(--bg-primary);
        }

        .btn-primary:hover {
            background: #4ac959;
        }

        .btn-secondary {
            background: var(--bg-primary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
        }

        .btn-secondary:hover {
            border-color: var(--accent-secondary);
            color: var(--accent-secondary);
        }

        .btn-danger {
            background: transparent;
            color: var(--accent-danger);
            border: 1px solid var(--accent-danger);
        }

        .btn-danger:hover {
            background: var(--accent-danger);
            color: var(--bg-primary);
        }

        .btn-new-book {
            width: 100%;
            padding: 1rem;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            color: var(--text-primary);
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.2s;
            margin-top: 0.5rem;
        }

        .btn-new-book:hover {
            border-color: var(--accent-primary);
            background: var(--accent-primary);
            color: var(--bg-primary);
            box-shadow: 0 0 20px rgba(63, 185, 80, 0.2);
            transform: translateY(-1px);
        }

        /* Right Panel - Settings */
        .settings-panel {
            background: var(--bg-primary);
            overflow-y: auto;
            padding: 2rem;
        }

        .tabs {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 2rem;
            border-bottom: 2px solid var(--border-color);
        }

        .tab {
            padding: 0.75rem 1.5rem;
            background: transparent;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            font-size: 0.95rem;
            font-weight: 600;
            border-bottom: 2px solid transparent;
            margin-bottom: -2px;
            transition: all 0.2s;
        }

        .tab:hover {
            color: var(--text-primary);
        }

        .tab.active {
            color: var(--accent-primary);
            border-bottom-color: var(--accent-primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            color: var(--text-primary);
            font-size: 0.9rem;
            font-family: 'JetBrains Mono', monospace;
            transition: all 0.2s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 10px rgba(63, 185, 80, 0.15);
            background: var(--bg-tertiary);
        }

        .form-group small {
            display: block;
            margin-top: 0.3rem;
            font-size: 0.8rem;
            color: var(--text-dim);
        }

        .btn-save {
            padding: 0.75rem 1.5rem;
            background: var(--accent-primary);
            color: var(--bg-primary);
            border: none;
            border-radius: 4px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-save:hover {
            background: #4ac959;
            box-shadow: 0 0 20px rgba(63, 185, 80, 0.3);
        }

        .btn-send-kindle {
            padding: 1rem 2rem;
            background: var(--accent-secondary);
            color: var(--bg-primary);
            border: none;
            border-radius: 6px;
            font-weight: 600;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 2rem;
        }

        .btn-send-kindle:hover {
            background: #6cb6ff;
            box-shadow: 0 0 20px rgba(88, 166, 255, 0.3);
        }

        .btn-download-epub, .btn-download-pdf {
            padding: 0.75rem 1.5rem;
            background: var(--bg-tertiary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-download-epub:hover {
            background: var(--accent-primary);
            color: var(--bg-primary);
            border-color: var(--accent-primary);
        }

        .btn-download-pdf:hover {
            background: var(--accent-danger);
            color: white;
            border-color: var(--accent-danger);
        }

        #deleteCoverBtn:hover {
            transform: scale(1.1);
            background: #ff6b6b;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--text-secondary);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--text-dim);
        }

        .section-title {
            font-size: 0.9rem;
            margin-bottom: 1.5rem;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 600;
        }

        .section-title::before {
            content: "$";
            color: var(--accent-secondary);
            font-size: 1.1rem;
            margin-right: 0.25rem;
        }

        .section-title i {
            color: var(--accent-primary);
            font-size: 0.85rem;
        }

        #coverUploadLabel:hover {
            background: var(--accent-primary);
            color: var(--bg-primary);
            border-color: var(--accent-primary);
        }

        /* Loading Overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(13, 17, 23, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            backdrop-filter: blur(4px);
        }

        .loading-overlay.hidden {
            display: none;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--border-color);
            border-top: 4px solid var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            margin-top: 1rem;
            color: var(--text-secondary);
            font-size: 0.95rem;
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 6px;
            padding: 1rem 1.5rem;
            min-width: 300px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transform: translateY(150%);
            opacity: 0;
            transition: all 0.3s;
            z-index: 10000;
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast.success {
            border-left: 4px solid var(--accent-primary);
        }

        .toast.error {
            border-left: 4px solid var(--accent-danger);
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .toast-icon {
            font-size: 1.2rem;
        }

        .toast.success .toast-icon {
            color: var(--accent-primary);
        }

        .toast.error .toast-icon {
            color: var(--accent-danger);
        }

        /* Loading state for buttons */
        .btn.loading {
            position: relative;
            color: transparent;
            pointer-events: none;
        }

        .btn.loading::after {
            content: "";
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid transparent;
            border-top-color: currentColor;
            border-radius: 50%;
            animation: spin 0.6s linear infinite;
            color: white;
        }
    </style>
</head>
<body>
    <header>
        <div class="logo">
            <div id="appTitle">JugaadPress</div>
            <div id="userSubtitle" style="font-size: 0.7rem; font-weight: 400; color: var(--text-dim); letter-spacing: 1px; margin-top: 0.2rem;">// HACKER'S NOTEBOOK</div>
        </div>
        <div class="user-menu">
            <span class="user-email" id="userEmail">Loading...</span>
            <button class="btn-logout" onclick="logout()">
                <i class="fas fa-sign-out-alt"></i> Sign Out
            </button>
        </div>
    </header>

    <div class="container">
        <!-- Left Panel: Books -->
        <div class="books-panel">
            <div class="panel-title">
                <i class="fas fa-book"></i> My Books
            </div>

            <ul class="book-list" id="bookList">
                <!-- Books will be loaded here dynamically -->
            </ul>

            <button class="btn-new-book" onclick="createNewBook()">
                <i class="fas fa-plus"></i> New Book
            </button>
        </div>

        <!-- Right Panel: Settings -->
        <div class="settings-panel">
            <div class="tabs">
                <button class="tab active" onclick="switchTab('global')">
                    <i class="fas fa-globe"></i> Global Settings
                </button>
                <button class="tab" onclick="switchTab('book')" id="bookTab">
                    <i class="fas fa-book"></i> Book Settings
                </button>
            </div>

            <!-- Global Settings Tab -->
            <div class="tab-content active" id="globalSettings">
                <div class="section-title">
                    <i class="fas fa-cog"></i> Global Settings
                </div>

                <form onsubmit="saveGlobalSettings(event)">
                    <div class="form-group">
                        <label>Sender Email (Gmail)</label>
                        <input type="email" id="senderEmail" placeholder="your-email@gmail.com" required>
                        <small>The Gmail account used to send books to Kindle</small>
                    </div>

                    <div class="form-group">
                        <label>Gmail App Password</label>
                        <input type="password" id="senderPassword" placeholder="xxxx-xxxx-xxxx-xxxx" required>
                        <small>
                            <a href="https://support.google.com/accounts/answer/185833" target="_blank" style="color: var(--accent-secondary);">
                                Get App Password
                            </a> (requires 2FA enabled)
                        </small>
                    </div>

                    <div class="form-group">
                        <label>Your Kindle Email</label>
                        <input type="email" id="kindleEmail" placeholder="your-kindle@kindle.com" required>
                        <small>
                            Find at
                            <a href="https://www.amazon.com/hz/mycd/myx#/home/settings/payment" target="_blank" style="color: var(--accent-secondary);">
                                Amazon Kindle Settings
                            </a>
                        </small>
                    </div>

                    <button type="submit" class="btn-save">
                        <i class="fas fa-save"></i> Save Global Settings
                    </button>
                </form>
            </div>

            <!-- Book Settings Tab -->
            <div class="tab-content" id="bookSettings">
                <div class="empty-state" id="noBookSelected">
                    <i class="fas fa-book-open"></i>
                    <p>Select a book from the left panel to edit its settings</p>
                </div>

                <div id="bookSettingsForm" style="display: none;">
                    <div class="section-title">
                        <i class="fas fa-book"></i> <span id="selectedBookName">Book Settings</span>
                    </div>

                    <form onsubmit="saveBookSettings(event)">
                        <div class="form-group">
                            <label>Book Title</label>
                            <input type="text" id="bookTitle" placeholder="My Amazing Book" required>
                            <small>Title that appears on your Kindle</small>
                        </div>

                        <div class="form-group">
                            <label>Cover Image (optional)</label>
                            <div id="coverPreview" style="margin-bottom: 10px; display: none; position: relative;">
                                <img id="coverImage" style="max-width: 200px; max-height: 300px; border: 1px solid var(--border-color); border-radius: 4px; display: block;">
                                <button type="button" id="deleteCoverBtn" onclick="deleteCoverImage()" style="position: absolute; top: 5px; right: 5px; background: var(--accent-danger); border: none; color: white; border-radius: 50%; width: 30px; height: 30px; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.3);">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div id="coverLoading" style="display: none; color: var(--text-secondary); margin-bottom: 10px;">
                                <i class="fas fa-spinner fa-spin"></i> Loading cover image...
                            </div>
                            <label for="bookCover" id="coverUploadLabel" style="display: inline-block; padding: 0.5rem 1rem; background: var(--bg-tertiary); border: 1px solid var(--border-color); border-radius: 4px; cursor: pointer; color: var(--text-primary); transition: all 0.2s; margin-bottom: 0.5rem;">
                                <i class="fas fa-upload"></i> <span id="coverUploadText">Upload Cover Image</span>
                            </label>
                            <input type="file" id="bookCover" accept="image/*" onchange="previewCoverImage(event)" style="display: none;">
                            <small style="display: block; margin-top: 0.5rem;">Recommended: 1600x2560px, JPG format</small>
                        </div>

                        <button type="submit" class="btn-save">
                            <i class="fas fa-save"></i> Save Book Settings
                        </button>

                        <div style="display: flex; gap: 0.5rem; flex-wrap: wrap; margin-top: 1rem;">
                            <button type="button" class="btn-download-epub" onclick="downloadBook('epub')" style="flex: 1; min-width: 200px;">
                                <i class="fas fa-download"></i> Download EPUB
                            </button>
                            <button type="button" class="btn-download-pdf" onclick="downloadBook('pdf')" style="flex: 1; min-width: 200px;">
                                <i class="fas fa-file-pdf"></i> Download PDF
                            </button>
                        </div>

                        <button type="button" class="btn-send-kindle" onclick="sendToKindle()">
                            <i class="fab fa-kindle"></i> Send This Book to Kindle
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
        <div class="loading-text" id="loadingText">Loading...</div>
    </div>

    <!-- Toast Container -->
    <div class="toast" id="toast">
        <div class="toast-content">
            <i class="toast-icon fas fa-check-circle"></i>
            <span id="toastMessage">Success!</span>
        </div>
    </div>

    <script>
        // State
        let selectedBook = null;
        let books = [];
        let globalSettings = {};

        // ===== UTILITY FUNCTIONS =====

        function showLoading(message = 'Loading...') {
            document.getElementById('loadingOverlay').classList.remove('hidden');
            document.getElementById('loadingText').textContent = message;
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.add('hidden');
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            const toastIcon = toast.querySelector('.toast-icon');

            // Set message
            toastMessage.textContent = message;

            // Set icon
            if (type === 'success') {
                toastIcon.className = 'toast-icon fas fa-check-circle';
                toast.className = 'toast success';
            } else {
                toastIcon.className = 'toast-icon fas fa-exclamation-circle';
                toast.className = 'toast error';
            }

            // Show toast
            setTimeout(() => toast.classList.add('show'), 100);

            // Hide after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        async function apiCall(url, options = {}, retries = 3) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, {
                        ...options,
                        headers: {
                            'Content-Type': 'application/json',
                            ...options.headers
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    return await response.json();
                } catch (error) {
                    console.error(`API call failed (attempt ${i + 1}/${retries}):`, error);
                    if (i === retries - 1) throw error;
                    // Wait before retry (exponential backoff)
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
        }

        // ===== LOAD INITIAL DATA =====

        async function loadDashboard() {
            try {
                showLoading('Loading dashboard...');
                await Promise.all([
                    loadUserInfo(),
                    loadBooks(),
                    loadGlobalSettings()
                ]);
                hideLoading();
            } catch (error) {
                hideLoading();
                showToast('Error loading dashboard. Please refresh the page.', 'error');
                console.error('Dashboard load error:', error);
            }
        }

        async function loadUserInfo() {
            try {
                const user = await apiCall('/api/user');
                document.getElementById('userEmail').textContent = user.email;

                // Personalize the subtitle
                if (user.name) {
                    const firstName = user.name.split(' ')[0].toLowerCase();
                    const userSubtitle = document.getElementById('userSubtitle');
                    userSubtitle.innerHTML = `// <span style="color: #ff6b6b; text-shadow: 0 0 10px rgba(255, 107, 107, 0.4);">@${firstName}</span>`;
                }
            } catch (error) {
                console.error('Failed to load user info:', error);
                showToast('Could not load user information', 'error');
            }
        }

        async function loadBooks() {
            try {
                books = await apiCall('/api/books');
                renderBooks();
            } catch (error) {
                console.error('Failed to load books:', error);
                showToast('Could not load books from Drive', 'error');
                books = [];
                renderBooks();
            }
        }

        function renderBooks() {
            const bookList = document.getElementById('bookList');

            if (books.length === 0) {
                bookList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-book"></i>
                        <p>No books yet. Create your first book!</p>
                    </div>
                `;
                return;
            }

            bookList.innerHTML = books.map(book => `
                <li class="book-item ${selectedBook === book.name ? 'active' : ''}" onclick="selectBook('${book.name}')">
                    <h3><i class="fas fa-book"></i> ${book.name}</h3>
                    <div class="book-meta">
                        ${book.pageCount} pages
                        ${book.lastModified ? '• Updated ' + formatDate(book.lastModified) : ''}
                    </div>
                    <div class="book-actions">
                        <button class="btn btn-primary" onclick="editBook('${book.name}'); event.stopPropagation();">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-danger" onclick="deleteBook('${book.name}'); event.stopPropagation();">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </li>
            `).join('');
        }

        async function selectBook(bookName) {
            selectedBook = bookName;
            renderBooks();

            // Switch to book settings tab
            switchTab('book');

            // Show loading state
            document.getElementById('noBookSelected').style.display = 'none';
            document.getElementById('bookSettingsForm').style.display = 'block';
            document.getElementById('selectedBookName').textContent = bookName;

            // Load settings
            await loadBookSettings(bookName);
        }

        async function loadGlobalSettings() {
            try {
                globalSettings = await apiCall('/api/settings/global');
                document.getElementById('senderEmail').value = globalSettings.sender_email || '';
                document.getElementById('senderPassword').value = globalSettings.sender_password || '';
                document.getElementById('kindleEmail').value = globalSettings.kindle_email || '';
            } catch (error) {
                console.error('Failed to load global settings:', error);
                showToast('Could not load settings from Drive', 'error');
            }
        }

        async function loadBookSettings(bookName) {
            try {
                // Show loading state
                const titleInput = document.getElementById('bookTitle');
                titleInput.value = 'Loading...';
                titleInput.disabled = true;

                // Show cover loading state
                const coverLoading = document.getElementById('coverLoading');
                const coverPreview = document.getElementById('coverPreview');
                const coverImage = document.getElementById('coverImage');
                const coverUploadText = document.getElementById('coverUploadText');

                coverLoading.style.display = 'block';
                coverPreview.style.display = 'none';
                coverUploadText.textContent = 'Loading...';

                const settings = await apiCall(`/api/books/${encodeURIComponent(bookName)}/settings`);

                titleInput.value = settings.title || bookName;
                titleInput.disabled = false;

                // Show cover if exists
                coverLoading.style.display = 'none';
                if (settings.cover) {
                    coverImage.src = settings.cover; // base64 data URL
                    coverPreview.style.display = 'block';
                    coverUploadText.innerHTML = '<i class="fas fa-sync-alt"></i> Replace Cover Image';
                } else {
                    coverPreview.style.display = 'none';
                    coverUploadText.innerHTML = '<i class="fas fa-upload"></i> Upload Cover Image';
                }
            } catch (error) {
                console.error('Failed to load book settings:', error);
                showToast('Could not load book settings', 'error');
                document.getElementById('bookTitle').disabled = false;
                document.getElementById('coverLoading').style.display = 'none';
                document.getElementById('coverUploadText').innerHTML = '<i class="fas fa-upload"></i> Upload Cover Image';
            }
        }

        function previewCoverImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const coverImage = document.getElementById('coverImage');
                    const coverPreview = document.getElementById('coverPreview');
                    const coverUploadText = document.getElementById('coverUploadText');

                    coverImage.src = e.target.result;
                    coverPreview.style.display = 'block';
                    coverUploadText.innerHTML = '<i class="fas fa-sync-alt"></i> Replace Cover Image';
                };
                reader.readAsDataURL(file);
            }
        }

        async function deleteCoverImage() {
            if (!confirm('Remove cover image? This will delete it from Drive.')) return;

            try {
                showLoading('Removing cover image...');

                // Save settings with empty cover
                await fetch(`/api/books/${encodeURIComponent(selectedBook)}/settings`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        title: document.getElementById('bookTitle').value,
                        cover: null
                    })
                });

                // Update UI
                document.getElementById('coverPreview').style.display = 'none';
                document.getElementById('coverImage').src = '';
                document.getElementById('bookCover').value = '';
                document.getElementById('coverUploadText').innerHTML = '<i class="fas fa-upload"></i> Upload Cover Image';

                hideLoading();
                showToast('✓ Cover image removed!', 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to delete cover:', error);
                showToast('✗ Error removing cover image', 'error');
            }
        }

        async function saveGlobalSettings(event) {
            event.preventDefault();

            const settings = {
                sender_email: document.getElementById('senderEmail').value,
                sender_password: document.getElementById('senderPassword').value,
                kindle_email: document.getElementById('kindleEmail').value
            };

            try {
                showLoading('Saving settings to Drive...');
                await fetch('/api/settings/global', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });
                hideLoading();
                showToast('✓ Global settings saved to Drive!', 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to save settings:', error);
                showToast('✗ Error saving settings', 'error');
            }
        }

        async function saveBookSettings(event) {
            event.preventDefault();

            const settings = {
                title: document.getElementById('bookTitle').value
            };

            // Handle cover image if uploaded
            const coverFile = document.getElementById('bookCover').files[0];
            if (coverFile) {
                // Convert to base64 for storage in Drive
                const reader = new FileReader();
                reader.onloadend = async function() {
                    settings.cover = reader.result; // base64 string
                    await saveSettingsToDrive(settings);
                };
                reader.readAsDataURL(coverFile);
            } else {
                await saveSettingsToDrive(settings);
            }
        }

        async function saveSettingsToDrive(settings) {
            try {
                showLoading('Saving book settings to Drive...');
                await fetch(`/api/books/${encodeURIComponent(selectedBook)}/settings`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(settings)
                });
                await loadBooks(); // Refresh book list
                hideLoading();
                showToast('✓ Book settings saved to Drive!', 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to save book settings:', error);
                showToast('✗ Error saving book settings', 'error');
            }
        }

        async function createNewBook() {
            const bookName = prompt('Enter book name:');
            if (!bookName || !bookName.trim()) return;

            try {
                showLoading('Creating book in Drive...');
                await fetch('/api/books', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: bookName.trim() })
                });
                await loadBooks();
                hideLoading();
                showToast(`✓ Book "${bookName}" created!`, 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to create book:', error);
                showToast('✗ Error creating book', 'error');
            }
        }

        async function deleteBook(bookName) {
            if (!confirm(`Delete "${bookName}"?\n\nThis will move it to your Drive trash.`)) return;

            try {
                showLoading('Deleting book...');
                await fetch(`/api/books/${encodeURIComponent(bookName)}`, {
                    method: 'DELETE'
                });

                if (selectedBook === bookName) {
                    selectedBook = null;
                    document.getElementById('noBookSelected').style.display = 'block';
                    document.getElementById('bookSettingsForm').style.display = 'none';
                }

                await loadBooks();
                hideLoading();
                showToast(`✓ Book "${bookName}" deleted`, 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to delete book:', error);
                showToast('✗ Error deleting book', 'error');
            }
        }

        function editBook(bookName) {
            window.location.href = `/editor/${encodeURIComponent(bookName)}`;
        }

        async function sendToKindle() {
            if (!selectedBook) return;

            if (!confirm(`Send "${selectedBook}" to your Kindle?\n\nMake sure you've configured your email settings in Global Settings.`)) return;

            try {
                showLoading('Generating EPUB and sending to Kindle...');
                const response = await fetch(`/api/books/${encodeURIComponent(selectedBook)}/send-to-kindle`, {
                    method: 'POST'
                });

                if (!response.ok) throw new Error('Failed to send');

                hideLoading();
                showToast('✓ Book sent to Kindle! Check your email in 2-5 minutes.', 'success');
            } catch (error) {
                hideLoading();
                console.error('Failed to send to Kindle:', error);
                showToast('✗ Error sending book. Check your settings.', 'error');
            }
        }

        async function downloadBook(format) {
            if (!selectedBook) return;

            const formatName = format.toUpperCase();
            const loadingMsg = format === 'epub' ? 'Generating EPUB...' : 'Generating PDF...';

            try {
                showLoading(loadingMsg);

                const response = await fetch(`/api/books/${encodeURIComponent(selectedBook)}/download?format=${format}`);

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to generate book');
                }

                // Get the blob
                const blob = await response.blob();

                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${selectedBook}.${format}`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                hideLoading();
                showToast(`✓ ${formatName} downloaded successfully!`, 'success');
            } catch (error) {
                hideLoading();
                console.error(`Failed to download ${format}:`, error);
                showToast(`✗ Error generating ${formatName}: ${error.message}`, 'error');
            }
        }

        function switchTab(tab) {
            // Update tab buttons
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));

            // Determine which tab was clicked
            if (tab === 'global') {
                document.querySelector('.tab:nth-child(1)').classList.add('active');
            } else {
                document.querySelector('.tab:nth-child(2)').classList.add('active');
            }

            // Update tab content
            document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));
            document.getElementById(tab === 'global' ? 'globalSettings' : 'bookSettings').classList.add('active');
        }

        function logout() {
            window.location.href = '/logout';
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diff = now - date;
            const days = Math.floor(diff / (1000 * 60 * 60 * 24));

            if (days === 0) return 'today';
            if (days === 1) return 'yesterday';
            if (days < 7) return `${days} days ago`;
            return date.toLocaleDateString();
        }

        // Initialize
        loadDashboard();
    </script>
</body>
</html>
